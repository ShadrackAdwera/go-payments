// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: users_roles.sql

package db

import (
	"context"
	"database/sql"
)

const createUserRole = `-- name: CreateUserRole :one
INSERT INTO users_roles (
  user_id, role_id, createdby_id
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, role_id, createdby_id
`

type CreateUserRoleParams struct {
	UserID      string `json:"user_id"`
	RoleID      int64  `json:"role_id"`
	CreatedbyID string `json:"createdby_id"`
}

func (q *Queries) CreateUserRole(ctx context.Context, arg CreateUserRoleParams) (UsersRole, error) {
	row := q.db.QueryRowContext(ctx, createUserRole, arg.UserID, arg.RoleID, arg.CreatedbyID)
	var i UsersRole
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoleID,
		&i.CreatedbyID,
	)
	return i, err
}

const deleteUserRole = `-- name: DeleteUserRole :exec
DELETE 
FROM users_roles 
WHERE id = $1
`

func (q *Queries) DeleteUserRole(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserRole, id)
	return err
}

const getUserRole = `-- name: GetUserRole :one
SELECT id, user_id, role_id, createdby_id FROM users_roles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserRole(ctx context.Context, id int64) (UsersRole, error) {
	row := q.db.QueryRowContext(ctx, getUserRole, id)
	var i UsersRole
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoleID,
		&i.CreatedbyID,
	)
	return i, err
}

const getUserRolesByUserIdAndRoleId = `-- name: GetUserRolesByUserIdAndRoleId :one
SELECT id, user_id, role_id, createdby_id 
FROM users_roles
WHERE user_id = $1 
AND role_id = $2 
LIMIT 1
`

type GetUserRolesByUserIdAndRoleIdParams struct {
	UserID string `json:"user_id"`
	RoleID int64  `json:"role_id"`
}

func (q *Queries) GetUserRolesByUserIdAndRoleId(ctx context.Context, arg GetUserRolesByUserIdAndRoleIdParams) (UsersRole, error) {
	row := q.db.QueryRowContext(ctx, getUserRolesByUserIdAndRoleId, arg.UserID, arg.RoleID)
	var i UsersRole
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoleID,
		&i.CreatedbyID,
	)
	return i, err
}

const getUsersRoles = `-- name: GetUsersRoles :many
SELECT id, user_id, role_id, createdby_id FROM users_roles 
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetUsersRolesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetUsersRoles(ctx context.Context, arg GetUsersRolesParams) ([]UsersRole, error) {
	rows, err := q.db.QueryContext(ctx, getUsersRoles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersRole
	for rows.Next() {
		var i UsersRole
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RoleID,
			&i.CreatedbyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserRole = `-- name: UpdateUserRole :one
UPDATE users_roles 
SET role_id = COALESCE($2,role_id),
user_id = COALESCE($3,user_id)
WHERE id = $1
RETURNING id, user_id, role_id, createdby_id
`

type UpdateUserRoleParams struct {
	ID     int64          `json:"id"`
	RoleID sql.NullInt64  `json:"role_id"`
	UserID sql.NullString `json:"user_id"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) (UsersRole, error) {
	row := q.db.QueryRowContext(ctx, updateUserRole, arg.ID, arg.RoleID, arg.UserID)
	var i UsersRole
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoleID,
		&i.CreatedbyID,
	)
	return i, err
}
