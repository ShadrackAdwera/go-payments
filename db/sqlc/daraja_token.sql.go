// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: daraja_token.sql

package db

import (
	"context"
	"time"
)

const createDarajaToken = `-- name: CreateDarajaToken :one
INSERT INTO daraja_token (
  access_token, expires_at
) VALUES (
  $1, $2
)
RETURNING id, access_token, expires_at
`

type CreateDarajaTokenParams struct {
	AccessToken string    `json:"access_token"`
	ExpiresAt   time.Time `json:"expires_at"`
}

func (q *Queries) CreateDarajaToken(ctx context.Context, arg CreateDarajaTokenParams) (DarajaToken, error) {
	row := q.db.QueryRowContext(ctx, createDarajaToken, arg.AccessToken, arg.ExpiresAt)
	var i DarajaToken
	err := row.Scan(&i.ID, &i.AccessToken, &i.ExpiresAt)
	return i, err
}

const deleteDarajaToken = `-- name: DeleteDarajaToken :exec
DELETE 
FROM daraja_token 
WHERE id = $1
`

func (q *Queries) DeleteDarajaToken(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDarajaToken, id)
	return err
}

const getDarajaToken = `-- name: GetDarajaToken :one
SELECT id, access_token, expires_at 
FROM daraja_token 
LIMIT 1
`

func (q *Queries) GetDarajaToken(ctx context.Context) (DarajaToken, error) {
	row := q.db.QueryRowContext(ctx, getDarajaToken)
	var i DarajaToken
	err := row.Scan(&i.ID, &i.AccessToken, &i.ExpiresAt)
	return i, err
}
