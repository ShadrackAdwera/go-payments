// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: users_permissions.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createUserPermission = `-- name: CreateUserPermission :one
INSERT INTO users_permissions (
  user_id, permission_id, createdby_id
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, permission_id, createdby_id
`

type CreateUserPermissionParams struct {
	UserID       string `json:"user_id"`
	PermissionID int64  `json:"permission_id"`
	CreatedbyID  string `json:"createdby_id"`
}

func (q *Queries) CreateUserPermission(ctx context.Context, arg CreateUserPermissionParams) (UsersPermission, error) {
	row := q.db.QueryRowContext(ctx, createUserPermission, arg.UserID, arg.PermissionID, arg.CreatedbyID)
	var i UsersPermission
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PermissionID,
		&i.CreatedbyID,
	)
	return i, err
}

const createUserPermissions = `-- name: CreateUserPermissions :exec
INSERT INTO users_permissions 
(user_id, permission_id, createdby_id) 
VALUES (UNNEST($1::varchar[]), UNNEST($2::BIGINT[]),UNNEST($3::varchar[]))
`

type CreateUserPermissionsParams struct {
	UserID       []string `json:"user_id"`
	PermissionID []int64  `json:"permission_id"`
	CreatedbyID  []string `json:"createdby_id"`
}

func (q *Queries) CreateUserPermissions(ctx context.Context, arg CreateUserPermissionsParams) error {
	_, err := q.db.ExecContext(ctx, createUserPermissions, pq.Array(arg.UserID), pq.Array(arg.PermissionID), pq.Array(arg.CreatedbyID))
	return err
}

const deleteUserPermission = `-- name: DeleteUserPermission :exec
DELETE 
FROM users_permissions 
WHERE id = $1
`

func (q *Queries) DeleteUserPermission(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserPermission, id)
	return err
}

const getPermissionsByUserId = `-- name: GetPermissionsByUserId :many
SELECT users_permissions.id, user_id, permission_id, users_permissions.createdby_id, users.id, username, permissions.id, name, description, permissions.createdby_id 
FROM users_permissions
JOIN users ON users_permissions.user_id = users.id
JOIN permissions ON users_permissions.permission_id = permissions.id
WHERE user_id = $1
`

type GetPermissionsByUserIdRow struct {
	ID            int64  `json:"id"`
	UserID        string `json:"user_id"`
	PermissionID  int64  `json:"permission_id"`
	CreatedbyID   string `json:"createdby_id"`
	ID_2          string `json:"id_2"`
	Username      string `json:"username"`
	ID_3          int64  `json:"id_3"`
	Name          string `json:"name"`
	Description   string `json:"description"`
	CreatedbyID_2 string `json:"createdby_id_2"`
}

func (q *Queries) GetPermissionsByUserId(ctx context.Context, userID string) ([]GetPermissionsByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getPermissionsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPermissionsByUserIdRow
	for rows.Next() {
		var i GetPermissionsByUserIdRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PermissionID,
			&i.CreatedbyID,
			&i.ID_2,
			&i.Username,
			&i.ID_3,
			&i.Name,
			&i.Description,
			&i.CreatedbyID_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserPermission = `-- name: GetUserPermission :one
SELECT id, user_id, permission_id, createdby_id FROM users_permissions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserPermission(ctx context.Context, id int64) (UsersPermission, error) {
	row := q.db.QueryRowContext(ctx, getUserPermission, id)
	var i UsersPermission
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PermissionID,
		&i.CreatedbyID,
	)
	return i, err
}

const getUserPermissionByUserIdAndPermissionId = `-- name: GetUserPermissionByUserIdAndPermissionId :one
SELECT id, user_id, permission_id, createdby_id 
FROM users_permissions
WHERE user_id = $1 
AND permission_id = $2 
LIMIT 1
`

type GetUserPermissionByUserIdAndPermissionIdParams struct {
	UserID       string `json:"user_id"`
	PermissionID int64  `json:"permission_id"`
}

func (q *Queries) GetUserPermissionByUserIdAndPermissionId(ctx context.Context, arg GetUserPermissionByUserIdAndPermissionIdParams) (UsersPermission, error) {
	row := q.db.QueryRowContext(ctx, getUserPermissionByUserIdAndPermissionId, arg.UserID, arg.PermissionID)
	var i UsersPermission
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PermissionID,
		&i.CreatedbyID,
	)
	return i, err
}

const getUsersPermissions = `-- name: GetUsersPermissions :many
SELECT id, user_id, permission_id, createdby_id FROM users_permissions 
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetUsersPermissionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetUsersPermissions(ctx context.Context, arg GetUsersPermissionsParams) ([]UsersPermission, error) {
	rows, err := q.db.QueryContext(ctx, getUsersPermissions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersPermission
	for rows.Next() {
		var i UsersPermission
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PermissionID,
			&i.CreatedbyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserPermission = `-- name: UpdateUserPermission :one
UPDATE users_permissions 
SET permission_id = COALESCE($2,permission_id),
user_id = COALESCE($3,user_id)
WHERE id = $1
RETURNING id, user_id, permission_id, createdby_id
`

type UpdateUserPermissionParams struct {
	ID           int64          `json:"id"`
	PermissionID sql.NullInt64  `json:"permission_id"`
	UserID       sql.NullString `json:"user_id"`
}

func (q *Queries) UpdateUserPermission(ctx context.Context, arg UpdateUserPermissionParams) (UsersPermission, error) {
	row := q.db.QueryRowContext(ctx, updateUserPermission, arg.ID, arg.PermissionID, arg.UserID)
	var i UsersPermission
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PermissionID,
		&i.CreatedbyID,
	)
	return i, err
}
