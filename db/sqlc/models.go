// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type ApprovalStatus string

const (
	ApprovalStatusPending  ApprovalStatus = "pending"
	ApprovalStatusApproved ApprovalStatus = "approved"
	ApprovalStatusRejected ApprovalStatus = "rejected"
)

func (e *ApprovalStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ApprovalStatus(s)
	case string:
		*e = ApprovalStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ApprovalStatus: %T", src)
	}
	return nil
}

type NullApprovalStatus struct {
	ApprovalStatus ApprovalStatus
	Valid          bool // Valid is true if ApprovalStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullApprovalStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ApprovalStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ApprovalStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullApprovalStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ApprovalStatus), nil
}

type PaymentTypes string

const (
	PaymentTypesMasterCard PaymentTypes = "master_card"
	PaymentTypesVisa       PaymentTypes = "visa"
	PaymentTypesMpesa      PaymentTypes = "mpesa"
)

func (e *PaymentTypes) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentTypes(s)
	case string:
		*e = PaymentTypes(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentTypes: %T", src)
	}
	return nil
}

type NullPaymentTypes struct {
	PaymentTypes PaymentTypes
	Valid        bool // Valid is true if PaymentTypes is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentTypes) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentTypes, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentTypes.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentTypes) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentTypes), nil
}

type Client struct {
	ID                   int64          `json:"id"`
	Name                 string         `json:"name"`
	Email                string         `json:"email"`
	Phone                string         `json:"phone"`
	AccountNumber        sql.NullString `json:"account_number"`
	PreferredPaymentType PaymentTypes   `json:"preferred_payment_type"`
}

type Request struct {
	ID    int64  `json:"id"`
	Title string `json:"title"`
	// Payment Status can be PENDING, APPROVED or REJECTED
	Status       ApprovalStatus `json:"status"`
	Amount       int64          `json:"amount"`
	PaidToID     int64          `json:"paid_to_id"`
	CreatedbyID  uuid.UUID      `json:"createdby_id"`
	ApprovedbyID uuid.UUID      `json:"approvedby_id"`
	CreatedAt    time.Time      `json:"created_at"`
	ApprovedAt   time.Time      `json:"approved_at"`
}

type User struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
	Email    string    `json:"email"`
	Role     string    `json:"role"`
}

type UserPayment struct {
	ID        int64     `json:"id"`
	RequestID int64     `json:"request_id"`
	ClientID  int64     `json:"client_id"`
	CreatedAt time.Time `json:"created_at"`
}
