// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: user_payments.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUserPayment = `-- name: CreateUserPayment :one
INSERT INTO user_payments (
  request_id, client_id, status
) VALUES (
  $1, $2, $3
)
RETURNING id, request_id, client_id, created_at, status
`

type CreateUserPaymentParams struct {
	RequestID sql.NullInt64 `json:"request_id"`
	ClientID  sql.NullInt64 `json:"client_id"`
	Status    PaidStatus    `json:"status"`
}

func (q *Queries) CreateUserPayment(ctx context.Context, arg CreateUserPaymentParams) (UserPayment, error) {
	row := q.db.QueryRowContext(ctx, createUserPayment, arg.RequestID, arg.ClientID, arg.Status)
	var i UserPayment
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.ClientID,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const deleteUserPayment = `-- name: DeleteUserPayment :exec
DELETE 
FROM user_payments 
WHERE id = $1
`

func (q *Queries) DeleteUserPayment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserPayment, id)
	return err
}

const getUserPayment = `-- name: GetUserPayment :one
SELECT user_payments.id, request_id, client_id, user_payments.created_at, user_payments.status, clients.id, name, email, phone, account_number, preferred_payment_type, clients.createdby_id, requests.id, title, requests.status, amount, paid_to_id, requests.createdby_id, approvedby_id, requests.created_at, approved_at
FROM user_payments
JOIN clients ON user_payments.client_id = clients.id
JOIN requests ON user_payments.request_id = requests.id
WHERE user_payments.id = $1 LIMIT 1
`

type GetUserPaymentRow struct {
	ID                   int64          `json:"id"`
	RequestID            sql.NullInt64  `json:"request_id"`
	ClientID             sql.NullInt64  `json:"client_id"`
	CreatedAt            time.Time      `json:"created_at"`
	Status               PaidStatus     `json:"status"`
	ID_2                 int64          `json:"id_2"`
	Name                 string         `json:"name"`
	Email                string         `json:"email"`
	Phone                string         `json:"phone"`
	AccountNumber        sql.NullString `json:"account_number"`
	PreferredPaymentType PaymentTypes   `json:"preferred_payment_type"`
	CreatedbyID          string         `json:"createdby_id"`
	ID_3                 int64          `json:"id_3"`
	Title                string         `json:"title"`
	Status_2             ApprovalStatus `json:"status_2"`
	Amount               int64          `json:"amount"`
	PaidToID             int64          `json:"paid_to_id"`
	CreatedbyID_2        string         `json:"createdby_id_2"`
	ApprovedbyID         string         `json:"approvedby_id"`
	CreatedAt_2          time.Time      `json:"created_at_2"`
	ApprovedAt           time.Time      `json:"approved_at"`
}

func (q *Queries) GetUserPayment(ctx context.Context, id int64) (GetUserPaymentRow, error) {
	row := q.db.QueryRowContext(ctx, getUserPayment, id)
	var i GetUserPaymentRow
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.ClientID,
		&i.CreatedAt,
		&i.Status,
		&i.ID_2,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.AccountNumber,
		&i.PreferredPaymentType,
		&i.CreatedbyID,
		&i.ID_3,
		&i.Title,
		&i.Status_2,
		&i.Amount,
		&i.PaidToID,
		&i.CreatedbyID_2,
		&i.ApprovedbyID,
		&i.CreatedAt_2,
		&i.ApprovedAt,
	)
	return i, err
}

const getUserPayments = `-- name: GetUserPayments :many
SELECT user_payments.id, request_id, client_id, user_payments.created_at, user_payments.status, clients.id, name, email, phone, account_number, preferred_payment_type, clients.createdby_id, requests.id, title, requests.status, amount, paid_to_id, requests.createdby_id, approvedby_id, requests.created_at, approved_at
FROM user_payments
JOIN clients ON user_payments.client_id = clients.id
JOIN requests ON user_payments.request_id = requests.id
ORDER BY user_payments.id
LIMIT $1
OFFSET $2
`

type GetUserPaymentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetUserPaymentsRow struct {
	ID                   int64          `json:"id"`
	RequestID            sql.NullInt64  `json:"request_id"`
	ClientID             sql.NullInt64  `json:"client_id"`
	CreatedAt            time.Time      `json:"created_at"`
	Status               PaidStatus     `json:"status"`
	ID_2                 int64          `json:"id_2"`
	Name                 string         `json:"name"`
	Email                string         `json:"email"`
	Phone                string         `json:"phone"`
	AccountNumber        sql.NullString `json:"account_number"`
	PreferredPaymentType PaymentTypes   `json:"preferred_payment_type"`
	CreatedbyID          string         `json:"createdby_id"`
	ID_3                 int64          `json:"id_3"`
	Title                string         `json:"title"`
	Status_2             ApprovalStatus `json:"status_2"`
	Amount               int64          `json:"amount"`
	PaidToID             int64          `json:"paid_to_id"`
	CreatedbyID_2        string         `json:"createdby_id_2"`
	ApprovedbyID         string         `json:"approvedby_id"`
	CreatedAt_2          time.Time      `json:"created_at_2"`
	ApprovedAt           time.Time      `json:"approved_at"`
}

func (q *Queries) GetUserPayments(ctx context.Context, arg GetUserPaymentsParams) ([]GetUserPaymentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserPayments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserPaymentsRow
	for rows.Next() {
		var i GetUserPaymentsRow
		if err := rows.Scan(
			&i.ID,
			&i.RequestID,
			&i.ClientID,
			&i.CreatedAt,
			&i.Status,
			&i.ID_2,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.AccountNumber,
			&i.PreferredPaymentType,
			&i.CreatedbyID,
			&i.ID_3,
			&i.Title,
			&i.Status_2,
			&i.Amount,
			&i.PaidToID,
			&i.CreatedbyID_2,
			&i.ApprovedbyID,
			&i.CreatedAt_2,
			&i.ApprovedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserPayment = `-- name: UpdateUserPayment :one
UPDATE user_payments 
SET status = $2
WHERE id = $1
RETURNING id, request_id, client_id, created_at, status
`

type UpdateUserPaymentParams struct {
	ID     int64      `json:"id"`
	Status PaidStatus `json:"status"`
}

func (q *Queries) UpdateUserPayment(ctx context.Context, arg UpdateUserPaymentParams) (UserPayment, error) {
	row := q.db.QueryRowContext(ctx, updateUserPayment, arg.ID, arg.Status)
	var i UserPayment
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.ClientID,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}
