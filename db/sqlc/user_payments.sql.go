// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: user_payments.sql

package db

import (
	"context"
	"database/sql"
)

const createUserPayment = `-- name: CreateUserPayment :one
INSERT INTO user_payments (
  request_id, client_id
) VALUES (
  $1, $2
)
RETURNING id, request_id, client_id, created_at
`

type CreateUserPaymentParams struct {
	RequestID sql.NullInt64 `json:"request_id"`
	ClientID  sql.NullInt64 `json:"client_id"`
}

func (q *Queries) CreateUserPayment(ctx context.Context, arg CreateUserPaymentParams) (UserPayment, error) {
	row := q.db.QueryRowContext(ctx, createUserPayment, arg.RequestID, arg.ClientID)
	var i UserPayment
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.ClientID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserPayment = `-- name: DeleteUserPayment :exec
DELETE 
FROM user_payments 
WHERE id = $1
`

func (q *Queries) DeleteUserPayment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserPayment, id)
	return err
}

const getUserPayment = `-- name: GetUserPayment :one
SELECT id, request_id, client_id, created_at FROM user_payments
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserPayment(ctx context.Context, id int64) (UserPayment, error) {
	row := q.db.QueryRowContext(ctx, getUserPayment, id)
	var i UserPayment
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.ClientID,
		&i.CreatedAt,
	)
	return i, err
}

const getUserPayments = `-- name: GetUserPayments :many
SELECT id, request_id, client_id, created_at FROM user_payments 
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetUserPaymentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetUserPayments(ctx context.Context, arg GetUserPaymentsParams) ([]UserPayment, error) {
	rows, err := q.db.QueryContext(ctx, getUserPayments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserPayment
	for rows.Next() {
		var i UserPayment
		if err := rows.Scan(
			&i.ID,
			&i.RequestID,
			&i.ClientID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserPayment = `-- name: UpdateUserPayment :one
UPDATE user_payments 
SET client_id = $2
WHERE id = $1
RETURNING id, request_id, client_id, created_at
`

type UpdateUserPaymentParams struct {
	ID       int64         `json:"id"`
	ClientID sql.NullInt64 `json:"client_id"`
}

func (q *Queries) UpdateUserPayment(ctx context.Context, arg UpdateUserPaymentParams) (UserPayment, error) {
	row := q.db.QueryRowContext(ctx, updateUserPayment, arg.ID, arg.ClientID)
	var i UserPayment
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.ClientID,
		&i.CreatedAt,
	)
	return i, err
}
