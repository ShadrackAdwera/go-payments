// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ShadrackAdwera/go-payments/db/sqlc (interfaces: TxStore)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/ShadrackAdwera/go-payments/db/sqlc"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockTxStore is a mock of TxStore interface.
type MockTxStore struct {
	ctrl     *gomock.Controller
	recorder *MockTxStoreMockRecorder
}

// MockTxStoreMockRecorder is the mock recorder for MockTxStore.
type MockTxStoreMockRecorder struct {
	mock *MockTxStore
}

// NewMockTxStore creates a new mock instance.
func NewMockTxStore(ctrl *gomock.Controller) *MockTxStore {
	mock := &MockTxStore{ctrl: ctrl}
	mock.recorder = &MockTxStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxStore) EXPECT() *MockTxStoreMockRecorder {
	return m.recorder
}

// ApprovePaymentRequest mocks base method.
func (m *MockTxStore) ApprovePaymentRequest(arg0 context.Context, arg1 db.TxApproveRequest) (db.TxApproveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovePaymentRequest", arg0, arg1)
	ret0, _ := ret[0].(db.TxApproveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApprovePaymentRequest indicates an expected call of ApprovePaymentRequest.
func (mr *MockTxStoreMockRecorder) ApprovePaymentRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovePaymentRequest", reflect.TypeOf((*MockTxStore)(nil).ApprovePaymentRequest), arg0, arg1)
}

// CreateClient mocks base method.
func (m *MockTxStore) CreateClient(arg0 context.Context, arg1 db.CreateClientParams) (db.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", arg0, arg1)
	ret0, _ := ret[0].(db.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockTxStoreMockRecorder) CreateClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockTxStore)(nil).CreateClient), arg0, arg1)
}

// CreateRequest mocks base method.
func (m *MockTxStore) CreateRequest(arg0 context.Context, arg1 db.CreateRequestParams) (db.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRequest", arg0, arg1)
	ret0, _ := ret[0].(db.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRequest indicates an expected call of CreateRequest.
func (mr *MockTxStoreMockRecorder) CreateRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequest", reflect.TypeOf((*MockTxStore)(nil).CreateRequest), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockTxStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockTxStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockTxStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserPayment mocks base method.
func (m *MockTxStore) CreateUserPayment(arg0 context.Context, arg1 db.CreateUserPaymentParams) (db.UserPayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserPayment", arg0, arg1)
	ret0, _ := ret[0].(db.UserPayment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserPayment indicates an expected call of CreateUserPayment.
func (mr *MockTxStoreMockRecorder) CreateUserPayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserPayment", reflect.TypeOf((*MockTxStore)(nil).CreateUserPayment), arg0, arg1)
}

// DeleteClient mocks base method.
func (m *MockTxStore) DeleteClient(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClient", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClient indicates an expected call of DeleteClient.
func (mr *MockTxStoreMockRecorder) DeleteClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClient", reflect.TypeOf((*MockTxStore)(nil).DeleteClient), arg0, arg1)
}

// DeleteRequest mocks base method.
func (m *MockTxStore) DeleteRequest(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRequest indicates an expected call of DeleteRequest.
func (mr *MockTxStoreMockRecorder) DeleteRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRequest", reflect.TypeOf((*MockTxStore)(nil).DeleteRequest), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockTxStore) DeleteUser(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockTxStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockTxStore)(nil).DeleteUser), arg0, arg1)
}

// DeleteUserPayment mocks base method.
func (m *MockTxStore) DeleteUserPayment(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserPayment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserPayment indicates an expected call of DeleteUserPayment.
func (mr *MockTxStoreMockRecorder) DeleteUserPayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPayment", reflect.TypeOf((*MockTxStore)(nil).DeleteUserPayment), arg0, arg1)
}

// GetClient mocks base method.
func (m *MockTxStore) GetClient(arg0 context.Context, arg1 int64) (db.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", arg0, arg1)
	ret0, _ := ret[0].(db.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockTxStoreMockRecorder) GetClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockTxStore)(nil).GetClient), arg0, arg1)
}

// GetClients mocks base method.
func (m *MockTxStore) GetClients(arg0 context.Context, arg1 db.GetClientsParams) ([]db.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClients", arg0, arg1)
	ret0, _ := ret[0].([]db.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClients indicates an expected call of GetClients.
func (mr *MockTxStoreMockRecorder) GetClients(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClients", reflect.TypeOf((*MockTxStore)(nil).GetClients), arg0, arg1)
}

// GetRequest mocks base method.
func (m *MockTxStore) GetRequest(arg0 context.Context, arg1 int64) (db.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest", arg0, arg1)
	ret0, _ := ret[0].(db.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockTxStoreMockRecorder) GetRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockTxStore)(nil).GetRequest), arg0, arg1)
}

// GetRequests mocks base method.
func (m *MockTxStore) GetRequests(arg0 context.Context, arg1 db.GetRequestsParams) ([]db.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequests", arg0, arg1)
	ret0, _ := ret[0].([]db.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequests indicates an expected call of GetRequests.
func (mr *MockTxStoreMockRecorder) GetRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequests", reflect.TypeOf((*MockTxStore)(nil).GetRequests), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockTxStore) GetUser(arg0 context.Context, arg1 uuid.UUID) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockTxStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockTxStore)(nil).GetUser), arg0, arg1)
}

// GetUserPayment mocks base method.
func (m *MockTxStore) GetUserPayment(arg0 context.Context, arg1 int64) (db.UserPayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPayment", arg0, arg1)
	ret0, _ := ret[0].(db.UserPayment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPayment indicates an expected call of GetUserPayment.
func (mr *MockTxStoreMockRecorder) GetUserPayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPayment", reflect.TypeOf((*MockTxStore)(nil).GetUserPayment), arg0, arg1)
}

// GetUserPayments mocks base method.
func (m *MockTxStore) GetUserPayments(arg0 context.Context, arg1 db.GetUserPaymentsParams) ([]db.UserPayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPayments", arg0, arg1)
	ret0, _ := ret[0].([]db.UserPayment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPayments indicates an expected call of GetUserPayments.
func (mr *MockTxStoreMockRecorder) GetUserPayments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPayments", reflect.TypeOf((*MockTxStore)(nil).GetUserPayments), arg0, arg1)
}

// GetUsers mocks base method.
func (m *MockTxStore) GetUsers(arg0 context.Context, arg1 db.GetUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockTxStoreMockRecorder) GetUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockTxStore)(nil).GetUsers), arg0, arg1)
}

// UpdateClient mocks base method.
func (m *MockTxStore) UpdateClient(arg0 context.Context, arg1 db.UpdateClientParams) (db.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClient", arg0, arg1)
	ret0, _ := ret[0].(db.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClient indicates an expected call of UpdateClient.
func (mr *MockTxStoreMockRecorder) UpdateClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClient", reflect.TypeOf((*MockTxStore)(nil).UpdateClient), arg0, arg1)
}

// UpdateRequest mocks base method.
func (m *MockTxStore) UpdateRequest(arg0 context.Context, arg1 db.UpdateRequestParams) (db.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRequest", arg0, arg1)
	ret0, _ := ret[0].(db.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRequest indicates an expected call of UpdateRequest.
func (mr *MockTxStoreMockRecorder) UpdateRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRequest", reflect.TypeOf((*MockTxStore)(nil).UpdateRequest), arg0, arg1)
}

// UpdateUserPayment mocks base method.
func (m *MockTxStore) UpdateUserPayment(arg0 context.Context, arg1 db.UpdateUserPaymentParams) (db.UserPayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPayment", arg0, arg1)
	ret0, _ := ret[0].(db.UserPayment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPayment indicates an expected call of UpdateUserPayment.
func (mr *MockTxStoreMockRecorder) UpdateUserPayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPayment", reflect.TypeOf((*MockTxStore)(nil).UpdateUserPayment), arg0, arg1)
}

// UpdateUserRole mocks base method.
func (m *MockTxStore) UpdateUserRole(arg0 context.Context, arg1 db.UpdateUserRoleParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRole", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserRole indicates an expected call of UpdateUserRole.
func (mr *MockTxStoreMockRecorder) UpdateUserRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRole", reflect.TypeOf((*MockTxStore)(nil).UpdateUserRole), arg0, arg1)
}
